clc;
clear all;
format short

% Initial point
a = 0;
b = 0;

% Define the function to minimize
f = @(x,y) x - y + 2*x.^2 + 2*x.*y + y.^2;

% Gradient of f(x, y)
grad = @(x,y) [1 + 4*x + 2*y , -1 + 2*y + 2*x];

fprintf('Starting Point: (%.4f, %.4f)\n\n', a, b);

for k = 1:4
    g = grad(a,b);
    fprintf('Iteration %d:\n', k);
    fprintf('  Gradient = [%.4f, %.4f]\n', g(1), g(2));
    
    d = -g / norm(g);  % Normalized steepest descent direction
    fprintf('  Descent direction = [%.4f, %.4f]\n', d(1), d(2));
    
    % Line search using fminbnd
    fun = @(z) f(a + z*d(1), b + z*d(2));
    x1 = fminbnd(fun, 0, 10);
    
    fprintf('  Step size (z) = %.4f\n', x1);
    
    % Update point
    a = a + x1*d(1);
    b = b + x1*d(2);
    
    fprintf('  New point = (%.4f, %.4f)\n', a, b);
    fprintf('  f(x, y) = %.4f\n\n', f(a,b));
end

fprintf('Final Approximation after 4 iterations: (%.4f, %.4f)\n', a, b);
fprintf('Function value at this point: f(x, y) = %.4f\n', f(a,b));
